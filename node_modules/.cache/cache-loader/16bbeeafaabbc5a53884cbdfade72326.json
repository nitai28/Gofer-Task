{"remainingRequest":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\src\\store.js","dependencies":[{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\src\\store.js","mtime":1534581325780},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\.babelrc","mtime":1524309964448},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534227874529},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _toConsumableArray from \"C:\\\\Users\\\\Nitai\\\\Desktop\\\\Gofer home assignment\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\";\nimport \"core-js/modules/es6.array.find\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport contactService from \"./services/contact.service.js\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  strict: true,\n  state: {\n    contacts: [],\n    currentContact: {}\n  },\n  mutations: {\n    setContacts: function setContacts(state, _ref) {\n      var contacts = _ref.contacts;\n      state.contacts = contacts;\n    },\n    setSelectedContact: function setSelectedContact(state, _ref2) {\n      var id = _ref2.id;\n      var contact = state.contacts.find(function (contact) {\n        return contact.id === id;\n      });\n      state.currentContact = contact;\n    },\n    deleteContact: function deleteContact(state, _ref3) {\n      var id = _ref3.id;\n      state.contacts = state.contacts.filter(function (contact) {\n        return contact.id !== id;\n      });\n    },\n    addContact: function addContact(state, _ref4) {\n      var contact = _ref4.contact;\n      state.contacts = [contact].concat(_toConsumableArray(state.contacts));\n    },\n    updateContact: function updateContact(state, _ref5) {\n      var contact = _ref5.contact;\n      var contactIdx = state.contacts.findIndex(function (currContact) {\n        return currContact.id === contact.id;\n      });\n      state.contacts.splice(contactIdx, 1, contact);\n    }\n  },\n  actions: {\n    getContacts: function getContacts(store) {\n      contactService.query().then(function (contacts) {\n        store.commit({\n          type: 'setContacts',\n          contacts: contacts\n        });\n      });\n    },\n    deletedContact: function deletedContact(store, _ref6) {\n      var id = _ref6.id;\n      contactService.removeContact(id).then(function () {\n        store.commit({\n          type: \"deleteContact\",\n          id: id\n        });\n      });\n    },\n    saveContact: function saveContact(store, _ref7) {\n      var contact = _ref7.contact;\n      return contactService.saveContact(contact).then(function (contact) {\n        store.commit({\n          type: \"addContact\",\n          contact: contact\n        });\n        return contact;\n      });\n    }\n  },\n  getters: {\n    contactsForDisplay: function contactsForDisplay(state) {\n      return state.contacts;\n    }\n  }\n});",{"version":3,"sources":["src\\store.js"],"names":["Vue","Vuex","contactService","use","Store","strict","state","contacts","currentContact","mutations","setContacts","setSelectedContact","id","contact","find","deleteContact","filter","addContact","updateContact","contactIdx","findIndex","currContact","splice","actions","getContacts","store","query","then","commit","type","deletedContact","removeContact","saveContact","getters","contactsForDisplay"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEAF,IAAIG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,KAAKG,KAAT,CAAe;AAC1BC,UAAQ,IADkB;AAE1BC,SAAO;AACHC,cAAU,EADP;AAEHC,oBAAgB;AAFb,GAFmB;AAO1BC,aAAW;AACPC,eADO,uBACKJ,KADL,QACwB;AAAA,UAAXC,QAAW,QAAXA,QAAW;AAC3BD,YAAMC,QAAN,GAAiBA,QAAjB;AACH,KAHM;AAIPI,sBAJO,8BAIYL,KAJZ,SAIyB;AAAA,UAALM,EAAK,SAALA,EAAK;AAC5B,UAAIC,UAAUP,MAAMC,QAAN,CAAeO,IAAf,CAAoB;AAAA,eAAWD,QAAQD,EAAR,KAAeA,EAA1B;AAAA,OAApB,CAAd;AACAN,YAAME,cAAN,GAAuBK,OAAvB;AACH,KAPM;AAQPE,iBARO,yBAQOT,KARP,SAQoB;AAAA,UAALM,EAAK,SAALA,EAAK;AACvBN,YAAMC,QAAN,GAAiBD,MAAMC,QAAN,CAAeS,MAAf,CAAsB;AAAA,eAAWH,QAAQD,EAAR,KAAeA,EAA1B;AAAA,OAAtB,CAAjB;AACH,KAVM;AAWPK,cAXO,sBAWIX,KAXJ,SAWsB;AAAA,UAAVO,OAAU,SAAVA,OAAU;AACzBP,YAAMC,QAAN,IAAkBM,OAAlB,4BAA8BP,MAAMC,QAApC;AACH,KAbM;AAePW,iBAfO,yBAeOZ,KAfP,SAeyB;AAAA,UAAVO,OAAU,SAAVA,OAAU;AAC5B,UAAMM,aAAab,MAAMC,QAAN,CAAea,SAAf,CACf;AAAA,eAAeC,YAAYT,EAAZ,KAAmBC,QAAQD,EAA1C;AAAA,OADe,CAAnB;AAGAN,YAAMC,QAAN,CAAee,MAAf,CAAsBH,UAAtB,EAAkC,CAAlC,EAAqCN,OAArC;AACH;AApBM,GAPe;AAiC1BU,WAAS;AAELC,eAFK,uBAEOC,KAFP,EAEc;AACfvB,qBAAewB,KAAf,GACKC,IADL,CACU,oBAAY;AACdF,cAAMG,MAAN,CAAa;AAACC,gBAAM,aAAP;AAAsBtB;AAAtB,SAAb;AACH,OAHL;AAIH,KAPI;AASLuB,kBATK,0BASUL,KATV,SASuB;AAAA,UAALb,EAAK,SAALA,EAAK;AACxBV,qBAAe6B,aAAf,CAA6BnB,EAA7B,EAAiCe,IAAjC,CAAsC,YAAM;AACxCF,cAAMG,MAAN,CAAa;AAACC,gBAAM,eAAP;AAAwBjB;AAAxB,SAAb;AACH,OAFD;AAGH,KAbI;AAcLoB,eAdK,uBAcOP,KAdP,SAcyB;AAAA,UAAVZ,OAAU,SAAVA,OAAU;AAC1B,aAAOX,eAAe8B,WAAf,CAA2BnB,OAA3B,EAAoCc,IAApC,CAAyC,mBAAW;AACvDF,cAAMG,MAAN,CAAa;AAACC,gBAAM,YAAP;AAAqBhB;AAArB,SAAb;AACA,eAAOA,OAAP;AACH,OAHM,CAAP;AAIH;AAnBI,GAjCiB;AAwD1BoB,WAAS;AACLC,sBADK,8BACc5B,KADd,EACqB;AACtB,aAAOA,MAAMC,QAAb;AACH;AAHI;AAxDiB,CAAf,CAAf","sourceRoot":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment","sourcesContent":["import Vue from \"vue\";\r\nimport Vuex from \"vuex\";\r\nimport contactService from \"./services/contact.service.js\";\r\n\r\nVue.use(Vuex);\r\n\r\nexport default new Vuex.Store({\r\n    strict: true,\r\n    state: {\r\n        contacts: [],\r\n        currentContact: {},\r\n\r\n    },\r\n    mutations: {\r\n        setContacts(state, {contacts}) {\r\n            state.contacts = contacts;\r\n        },\r\n        setSelectedContact(state, {id}) {\r\n            let contact = state.contacts.find(contact => contact.id === id)\r\n            state.currentContact = contact;\r\n        },\r\n        deleteContact(state, {id}) {\r\n            state.contacts = state.contacts.filter(contact => contact.id !== id);\r\n        },\r\n        addContact(state, {contact}) {\r\n            state.contacts = [contact, ...state.contacts];\r\n        },\r\n\r\n        updateContact(state, {contact}) {\r\n            const contactIdx = state.contacts.findIndex(\r\n                currContact => currContact.id === contact.id\r\n            );\r\n            state.contacts.splice(contactIdx, 1, contact);\r\n        },\r\n\r\n\r\n\r\n    },\r\n\r\n    actions: {\r\n\r\n        getContacts(store) {\r\n            contactService.query()\r\n                .then(contacts => {\r\n                    store.commit({type: 'setContacts', contacts})\r\n                })\r\n        },\r\n\r\n        deletedContact(store, {id}) {\r\n            contactService.removeContact(id).then(() => {\r\n                store.commit({type: \"deleteContact\", id});\r\n            });\r\n        },\r\n        saveContact(store, {contact}) {\r\n            return contactService.saveContact(contact).then(contact => {\r\n                store.commit({type: \"addContact\", contact});\r\n                return contact;\r\n            });\r\n        },\r\n\r\n\r\n    },\r\n    getters: {\r\n        contactsForDisplay(state) {\r\n            return state.contacts;\r\n        },\r\n\r\n\r\n    }\r\n});\r\n"]}]}