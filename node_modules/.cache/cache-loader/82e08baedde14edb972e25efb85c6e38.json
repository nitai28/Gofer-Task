{"remainingRequest":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\src\\services\\contact.service.js","dependencies":[{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\src\\services\\contact.service.js","mtime":1534573548628},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\.babelrc","mtime":1524309964448},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534227874529},{"path":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment\\node_modules\\babel-loader\\lib\\index.js","mtime":1519636541000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\nimport storageService from './storage.service.js';\nimport axios from 'axios';\nvar KEY = 'contactsAppKey';\n\nfunction query() {\n  if (localStorage[KEY]) return storageService.load(KEY);else return axios.get('contactsDb.json').then(function (res) {\n    localStorage[KEY] = JSON.stringify(res.data);\n    return res.data;\n  });\n}\n\nfunction getEmptyObj() {\n  return {\n    id: '',\n    firstName: '',\n    lastName: '',\n    birthDay: '',\n    phoneNumber: '',\n    emailAddress: '',\n    photo: '',\n    accountName: '',\n    password: ''\n  };\n}\n\nfunction removeContact(contactId) {\n  return storageService.load(KEY).then(function (contacts) {\n    contacts = contacts.filter(function (contact) {\n      return contact.id !== contactId;\n    });\n    return storageService.store(KEY, contacts);\n  });\n}\n\nfunction saveContact(contact) {\n  return new Promise(function (resolve, reject) {\n    storageService.load(KEY).then(function (contacts) {\n      contact.id = Date.now();\n      contacts.unshift(contact);\n      storageService.store(KEY, contacts);\n      resolve(contact);\n    });\n  });\n}\n\nexport default {\n  saveContact: saveContact,\n  removeContact: removeContact,\n  getEmptyObj: getEmptyObj,\n  query: query\n};",{"version":3,"sources":["src\\services\\contact.service.js"],"names":["storageService","axios","KEY","query","localStorage","load","get","then","JSON","stringify","res","data","getEmptyObj","id","firstName","lastName","birthDay","phoneNumber","emailAddress","photo","accountName","password","removeContact","contactId","contacts","filter","contact","store","saveContact","Promise","resolve","reject","Date","now","unshift"],"mappings":";AAAA,OAAOA,cAAP,MAA2B,sBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,gBAAZ;;AAGA,SAASC,KAAT,GAAiB;AACb,MAAIC,aAAaF,GAAb,CAAJ,EAAuB,OAAOF,eAAeK,IAAf,CAAoBH,GAApB,CAAP,CAAvB,KAEK,OAAOD,MAAMK,GAAN,CAAU,iBAAV,EACPC,IADO,CACF,eAAO;AACTH,iBAAaF,GAAb,IAAoBM,KAAKC,SAAL,CAAeC,IAAIC,IAAnB,CAApB;AACA,WAAOD,IAAIC,IAAX;AACH,GAJO,CAAP;AAMR;;AAED,SAASC,WAAT,GAAuB;AACnB,SAAO;AACHC,QAAI,EADD;AAEHC,eAAW,EAFR;AAGHC,cAAU,EAHP;AAIHC,cAAU,EAJP;AAKHC,iBAAa,EALV;AAMHC,kBAAc,EANX;AAOHC,WAAO,EAPJ;AAQHC,iBAAa,EARV;AASHC,cAAU;AATP,GAAP;AAYH;;AAED,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAC9B,SAAOvB,eAAeK,IAAf,CAAoBH,GAApB,EAAyBK,IAAzB,CAA8B,oBAAY;AAC7CiB,eAAWA,SAASC,MAAT,CAAgB;AAAA,aAAWC,QAAQb,EAAR,KAAeU,SAA1B;AAAA,KAAhB,CAAX;AACA,WAAOvB,eAAe2B,KAAf,CAAqBzB,GAArB,EAA0BsB,QAA1B,CAAP;AACH,GAHM,CAAP;AAIH;;AAED,SAASI,WAAT,CAAqBF,OAArB,EAA8B;AAC1B,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC/B,mBAAeK,IAAf,CAAoBH,GAApB,EACKK,IADL,CACU,oBAAY;AACdmB,cAAQb,EAAR,GAAamB,KAAKC,GAAL,EAAb;AACAT,eAASU,OAAT,CAAiBR,OAAjB;AACA1B,qBAAe2B,KAAf,CAAqBzB,GAArB,EAA0BsB,QAA1B;AACAM,cAAQJ,OAAR;AACH,KANL;AAOH,GARM,CAAP;AAUH;;AAED,eAAe;AACXE,0BADW;AAEXN,8BAFW;AAGXV,0BAHW;AAIXT;AAJW,CAAf","sourceRoot":"C:\\Users\\Nitai\\Desktop\\Gofer home assignment","sourcesContent":["import storageService from './storage.service.js'\r\nimport axios from 'axios';\r\n\r\nconst KEY = 'contactsAppKey';\r\n\r\n\r\nfunction query() {\r\n    if (localStorage[KEY]) return storageService.load(KEY)\r\n\r\n    else return axios.get('contactsDb.json')\r\n        .then(res => {\r\n            localStorage[KEY] = JSON.stringify(res.data)\r\n            return res.data;\r\n        });\r\n\r\n}\r\n\r\nfunction getEmptyObj() {\r\n    return {\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        birthDay: '',\r\n        phoneNumber: '',\r\n        emailAddress: '',\r\n        photo: '',\r\n        accountName: '',\r\n        password: ''\r\n    }\r\n\r\n}\r\n\r\nfunction removeContact(contactId) {\r\n    return storageService.load(KEY).then(contacts => {\r\n        contacts = contacts.filter(contact => contact.id !== contactId);\r\n        return storageService.store(KEY, contacts);\r\n    });\r\n}\r\n\r\nfunction saveContact(contact) {\r\n    return new Promise((resolve, reject) => {\r\n        storageService.load(KEY)\r\n            .then(contacts => {\r\n                contact.id = Date.now();\r\n                contacts.unshift(contact);\r\n                storageService.store(KEY, contacts);\r\n                resolve(contact)\r\n            });\r\n    });\r\n\r\n}\r\n\r\nexport default {\r\n    saveContact,\r\n    removeContact,\r\n    getEmptyObj,\r\n    query\r\n}\r\n"]}]}